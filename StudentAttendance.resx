<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEBLAEsAAD/4QBWRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUAAAAB
        AAAARgEoAAMAAAABAAIAAAITAAMAAAABAAEAAAAAAAAAAAEsAAAAAQAAASwAAAAB/9sAQwAIBgYHBgUI
        BwcHCQkICgwUDQwLCwwZEhMPFB0aHx4dGhwcICQuJyAiLCMcHCg3KSwwMTQ0NB8nOT04MjwuMzQy/9sA
        QwEJCQkMCwwYDQ0YMiEcITIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy
        MjIyMjIy/8AAEQgBaAKAAwEiAAIRAQMRAf/EAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//E
        ALUQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYX
        GBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SV
        lpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5
        +v/EAB8BAAMBAQEBAQEBAQEAAAAAAAABAgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMR
        BAUhMQYSQVEHYXETIjKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJ
        SlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5
        usLDxMXGx8jJytLT1NXW19jZ2uLj5OXm5+jp6vLz9PX29/j5+v/aAAwDAQACEQMRAD8A9/pKWk6UAFJR
        RQAU0mlJpKAEozRSUAFFFJQAlFLSUAGaSiigANNpaKAEzRRRmgAozRmkoAKKKSgApaSigAzRRRQAUUlL
        mgAopKKAFozSZooAKWkpM0ALRRSZoAM0UUUAQzQhxkYDD9aqYIJBGCK0KimiDjIwGH60AVKKOQSCORRQ
        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
        OKM4ptABRRSUAFFFGcUAHT60lFFABSdaOtLQAUUUlABRRRQAUUUmaADNFJRmgBc0lFFABjIpmMGn0lAD
        aM0H0pKAClopKACiiigApepo6mndBgUAHQYFApKWgBelJRnNFAEcsQcZHDfzqqcgkEYIq9UcsQcZHDD9
        aAKuaKQggkHgjqDSZoAWiiigApc0lFAC0UZooAKKKKACiiigAooooAKM0UUALRSZpaACiiigBc0UlLmg
        AooooAKXNJRQAtOVCx9B3NCIXOOg7mpwAAABgUAIAAMAYFFLRQAlJilooASilxSUAFGaKKAFpMUZpaAN
        bOBVd3LHA4H86HcscDgfzplABRRRQAUZxRnFNoAKKKSgAooo6fWgAzj60lFFABSdaOtLQAUUUlABRRRQ
        AUUUmaADNFFJmgAzRRRQAUUUlABRmjNAoATGaTpTqQ8igBtFFFABR1o60vTgUAL04opKd0oAKSiigApc
        5pKKAFozRmkoAiliDjIwGH61VwckEYI6itDFRSxBxkcMP1oAqZpaQggkEYI6ijNAC0UUUAFLmkooAWij
        NFABRRRQAUUUUAFFFFABRmiigBaKTNLQAUUUUALmikpc0AFOVC544A6mhELnHQdzVgAAYAwKAAAADAwK
        KKKACiiigApKWigBKKKKAEooxRQAUZoooAuUUUUAFGcUZxTaACiikoAM0UUdKADp9aSiigApOtHWloAK
        KKSgAooooAKKKTNABmiijNABSUUUAFFFJQAUZozRigAFFFJQAUlFFAB1oxzRRQAdOBRR7UvSgA6UlFFA
        BmlpKKAFoopKAClHvSYpaAFoozRQBFLEHGRww/WqhBBIIwR1FaOKili8wZHDD9aAKeaWkIIJBGMdRRmg
        BaKKKAClzSUUALRRmigAooooAKKKKACiiigAozRRQAtFJmloAKeibz6AdTQiFzxwB1NWAAAABgCgAAAA
        AGAKWiigApKWigBKKKKACiiigApKWigBKTFLRQAlFGKKALlGcUUUANooooASiiigAzj60lFFABSdaKKA
        FooooASiiigAooooATNFFFABSUUUAFFFFACUZoooABRRRQAlJRRQAUUUUAHSiiigAozRRQAUdaKKACii
        igAzRiiigBaKKKACloooAWiiigCKWESDIwGH61TwQSCMEdRRRQAZpaKKACiiigApc0UUAFFFFABRRRQA
        UUUUAFFFFABUkaFzjoB1NFFAFkAKAAMAUuKKKAEooooAKKKKACkoooAKKKKACiiigApKKKACjFFFAH//
        2Q==
</value>
  </data>
</root>